{"version":3,"sources":["components/success-form/success.svg","actions/index.ts","services/involve-api-service.ts","components/spinner/spinner.tsx","components/exchange-form/exchange-form.tsx","components/pages/exchange.tsx","components/confirm-form/confirm-form.tsx","components/pages/confirm.tsx","components/success-form/success-form.tsx","components/pages/success.tsx","components/app/app.tsx","components/error-indicator/error-indicator.tsx","components/error-boundry/error-boundry.tsx","reducers/index.ts","store.ts","index.tsx"],"names":["module","exports","involveApiService","baseUrl","fetchData","URI","a","fetch","res","ok","Error","status","json","postData","data","method","headers","body","JSON","stringify","response","getPaymentMethods","calculate","query","amount","toString","base","invoicePayMethod","withdrawPayMethod","createBid","changeMethod","methodId","type","payload","changeAmount","fetchPayMethods","dispatch","then","invoice","id","withdraw","catch","err","console","log","Spinner","className","connect","payMethods","bid","fetchValue","baseChanged","valueLoaded","clearInputs","props","useState","redirect","setRedirect","disabled","useEffect","to","renderCol","field","onChange","e","currentTarget","value","handleSelectChange","map","x","key","name","v","Number","handleInputChange","isLoading","onSubmit","Exchange","success","message","methodName","onClick","Confirm","src","icon","Success","App","path","component","exact","ErrorIndicator","ErrorBoundry","state","hasError","this","setState","children","Component","initialState","reducer","action","find","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c98e11f0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/success.835f78d9.svg\";","import { Dispatch } from \"redux\";\nimport InvolveApiService, { PayMethodResponse, Base, CalculateQuery, CalculateResponse, CreateBidQuery, CreateBidResponse } from \"../services/involve-api-service\";\n\nconst involveApiService = new InvolveApiService()\n\nexport const FETCH_PAYMETHODS_REQUEST = 'FETCH_PAYMETHODS_REQUEST'\nexport const FETCH_PAYMETHODS_SUCCESS = 'FETCH_PAYMETHODS_SUCCESS'\nexport const CHANGE_METHOD = 'CHANGE_METHOD'\nexport const FETCH_VALUE_REQUEST = 'FETCH_VALUE_REQUEST'\nexport const FETCH_VALUE_SUCCESS = 'FETCH_VALUE_SUCCESS'\nexport const CHANGE_AMOUNT = 'CHANGE_AMOUNT'\nexport const CREATE_BID_REQUEST = 'CREATE_BID_REQUEST'\nexport const CREATE_BID_SUCCESS = 'CREATE_BID_SUCCESS'\nexport const CLEAR_INPUTS = 'CLEAR_INPUTS'\n\ninterface PayMethodRequestedAction { type: typeof FETCH_PAYMETHODS_REQUEST }\n\ninterface PayMethodsLoadedAction {\n  type: typeof FETCH_PAYMETHODS_SUCCESS\n  payload: PayMethodResponse\n}\n\nexport interface ChangeMethod {\n  type: typeof CHANGE_METHOD\n  payload: { \n    methodId: string\n    base: Base\n  }\n}\n\ninterface ChangeAmount {\n  type: typeof CHANGE_AMOUNT\n  payload: { \n    amount: string\n    base: Base\n  }\n}\n\ninterface ValueRequestedAction { \n  type: typeof FETCH_VALUE_REQUEST,\n  payload: {\n    base: Base\n  }\n}\n\ninterface ValueLoadedAction {\n  type: typeof FETCH_VALUE_SUCCESS,\n  payload: {\n    base: Base\n  }\n}\n\ninterface CreateBidRequest {\n  type: typeof CREATE_BID_REQUEST\n}\n\ninterface CreateBidLoadedAction {\n  type: typeof CREATE_BID_SUCCESS,\n  payload: { message: string }\n}\n\nexport interface ClearInputs {\n  type: typeof CLEAR_INPUTS\n}\n\nexport type ActionTypes = \n  PayMethodRequestedAction | \n  PayMethodsLoadedAction | \n  ChangeMethod | \n  ValueRequestedAction |\n  ValueLoadedAction |\n  ChangeAmount |\n  CreateBidRequest |\n  CreateBidLoadedAction |\n  ClearInputs\n\nconst payMethodRequested = (): PayMethodRequestedAction => {\n  return {\n    type: FETCH_PAYMETHODS_REQUEST\n  }\n};\n\nconst payMethodsLoaded = (payMethods: PayMethodResponse): PayMethodsLoadedAction => {\n  return {\n    type: FETCH_PAYMETHODS_SUCCESS,\n    payload: payMethods\n  };\n};\n\nexport const changeMethod = (methodId: string, base: Base): ChangeMethod => {\n  return {\n    type: CHANGE_METHOD,\n    payload: { methodId, base }\n  }\n}\n\nconst changeAmount = (amount: string, base: Base): ChangeAmount => {\n  return {\n    type: CHANGE_AMOUNT,\n    payload: { amount, base }\n  }\n}\n\nconst valueRequested = (base: Base): ValueRequestedAction => {\n  return {\n    type: FETCH_VALUE_REQUEST,\n    payload: { base }\n  }\n}\n\nconst valueLoaded = (base: Base): ValueLoadedAction => {\n  return {\n    type: FETCH_VALUE_SUCCESS,\n    payload: { base }\n  };\n}\n\nconst createBidRequested = (): CreateBidRequest => {\n  return {\n    type: CREATE_BID_REQUEST\n  }\n}\n\nconst createBidLoaded = (message: string): CreateBidLoadedAction => {\n  return {\n    type: CREATE_BID_SUCCESS,\n    payload: { message }\n  }\n}\n\nexport const clearInputs = (): ClearInputs => {\n  return {\n    type: CLEAR_INPUTS\n  }\n}\n\nexport const createBid = (dispatch: Dispatch, query: CreateBidQuery) => () => {\n  dispatch(createBidRequested())\n  involveApiService.createBid(query)\n    .then((data: CreateBidResponse) => {\n      dispatch(createBidLoaded(data.message))\n    })\n}\n\nexport const fetchValue = (dispatch: Dispatch, query: CalculateQuery) => () => {\n  dispatch(changeAmount(query.amount.toString(), query.base))\n  const baseChanged = query.base === 'invoice' ? 'withdraw' : 'invoice'\n  dispatch(valueRequested(baseChanged));\n\n  involveApiService.calculate(query)\n    .then((data: CalculateResponse) => { \n      dispatch(changeAmount(data.amount.toString(), baseChanged))\n      dispatch(valueLoaded(baseChanged)) \n    })\n    .catch((err: any) => console.log(err));\n}\n\nexport const fetchPayMethods = (dispatch: Dispatch) => () => {\n  dispatch(payMethodRequested());\n  involveApiService.getPaymentMethods()\n    .then((data: PayMethodResponse) => {\n      dispatch(payMethodsLoaded(data))\n      dispatch(changeMethod(data.invoice[0].id.toString(), 'invoice'))\n      dispatch(changeMethod(data.withdraw[0].id.toString(), 'withdraw'))\n    })\n    .catch((err: any) => console.log(err));\n}\n","// API BASE URL: https://involve-it.com/test_front/api (CORS are allowed)\n\n// Method: GET\n// URI: /payMethods\n\nexport interface PayMethod {\n  id: number;\n  name: string;\n}\n \nexport interface PayMethodResponse {\n  invoice: PayMethod[];\n  withdraw: PayMethod[];\n}\n\n// Method: GET\n// URI: /payMethods/calculate\nexport type Base = 'invoice' | 'withdraw'\n\nexport interface CalculateQuery {\n  base: Base;\n  amount: number;\n  invoicePayMethod: number;\n  withdrawPayMethod: number;\n}\n \nexport interface CalculateResponse {\n  amount: number;\n}\n\n// Method: POST\n// URI: /bids\n\nexport interface CreateBidQuery {\n  amount: number;\n  base: Base;\n  invoicePayMethod: number;\n  withdrawPayMethod: number;\n}\n\nexport interface CreateBidResponse {\n  message: string\n}\n\nexport default class InvolveApiService {\n  baseUrl = 'https://involve-it.com/test_front/api'\n\n  fetchData = async (URI: string) => {\n    const res = await fetch(`${this.baseUrl}${URI}`)\n    \n    if (!res.ok) {\n      throw new Error(`Could not fetch ${URI}` +\n        `, received ${res.status}`)\n    }\n    return await res.json();\n  }\n\n  postData = async (URI: string, data = {}) => {\n    const response = await fetch(`${this.baseUrl}${URI}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    return await response.json(); \n  }\n\n  getPaymentMethods = async () => {\n    return await this.fetchData('/payMethods')\n  }\n\n  calculate = async (query: CalculateQuery) => {\n    return await this.fetchData(`/payMethods/calculate?amount=${query.amount.toString()}&base=${query.base.toString()}&invoicePayMethod=${query.invoicePayMethod.toString()}&withdrawPayMethod=${query.withdrawPayMethod.toString()}`)\n  }\n\n  createBid = async (query: CreateBidQuery) => {\n    return await this.postData('/bids', query)\n  }\n}","import React from 'react'\nimport './spinner.css'\n\nconst Spinner = () => {\n  return <div className=\"loader\"></div>\n}\n\nexport default Spinner","import React, { useEffect, useState } from 'react'\nimport './exchange-form.css'\nimport { connect } from 'react-redux'\nimport { Dispatch } from 'redux'\nimport { fetchPayMethods, changeMethod, fetchValue, ChangeMethod, clearInputs, ClearInputs } from '../../actions'\nimport { PayMethod, Base, CalculateQuery } from '../../services/involve-api-service'\nimport { Redirect } from 'react-router-dom'\nimport { State, PayMethodsState, BidState } from '../../reducers'\nimport Spinner from '../spinner/spinner'\n\ninterface Props {\n  payMethods: PayMethodsState\n  bid: BidState\n  fetchPayMethods: () => void\n  changeMethod: (id: string, base: Base) => ChangeMethod\n  fetchValue: (query: CalculateQuery) => void\n  clearInputs: () => ClearInputs\n}\n\nconst ExchangeForm = (props: Props) => {\n  const {\n    fetchPayMethods, \n    payMethods, \n    changeMethod,\n    bid,\n    fetchValue,\n    clearInputs\n  } = props\n\n  const [ redirect, setRedirect ] = useState(false)\n\n  const disabled = bid.invoice.amount === '' || bid.withdraw.amount === ''\n\n  useEffect(() => {\n    clearInputs()\n    fetchPayMethods()\n  }, [fetchPayMethods])\n\n  if (redirect) return <Redirect to=\"/confirm\" />\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>, field: Base) => {\n    const v = e.currentTarget.value\n\n    if (!Number(v) && v !== '') return\n\n    const query = {\n      base: field,\n      amount: Number(v),\n      invoicePayMethod: Number(bid.invoice.methodId),\n      withdrawPayMethod: Number(bid.withdraw.methodId)\n    }\n\n    fetchValue(query)\n  }\n\n  const handleSelectChange = (e: React.ChangeEvent<HTMLSelectElement>, field: Base) => {\n    changeMethod(e.currentTarget.value, field)\n  }\n\n  const handleSubmit = () => {\n    if (bid.invoice.amount !== '' && bid.withdraw.amount !== '') {\n      setRedirect(true)\n    }\n  }\n\n  const renderCol = (field: Base) => {\n\n    return <div className='col'>\n      <h2>{field === 'invoice' ? 'Sell' : 'Buy'}</h2>\n      <select onChange={(e) => handleSelectChange(e, field)} value={bid[field].methodId}>\n        {payMethods[field].map((x: PayMethod) => <option key={x.id} value={x.id}>{x.name}</option>)}\n      </select>\n      <input type=\"text\" value={bid[field].amount} onChange={(e) => handleInputChange(e, field)} />\n      {bid[field].isLoading && <div className='spinner'><Spinner /></div>}\n    </div>\n  }\n\n  return <div className='form_wrapper'>\n    <form onSubmit={handleSubmit}>\n      <div className='row'>\n        {renderCol('invoice')}\n        {renderCol('withdraw')}\n      </div>\n      <div className='row-buttons'>\n        <button\n          type=\"submit\"\n          disabled={disabled}\n          className='button'\n        >\n          Exchange\n        </button>\n      </div>\n    </form>\n    \n  </div>\n}\n\nconst mapStateToProps = ({ payMethods, bid }: State) => {\n  return { payMethods, bid };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    fetchPayMethods: fetchPayMethods(dispatch),\n    changeMethod: (id: string, base: Base) => dispatch(changeMethod(id, base)),\n    fetchValue: (query: CalculateQuery) => fetchValue(dispatch, query)(),\n    clearInputs: () => dispatch(clearInputs())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExchangeForm)","import React from 'react'\nimport ExchangeForm from '../exchange-form/exchange-form'\n\nconst Exchange = () => {\n  return <ExchangeForm />\n}\n\nexport default Exchange","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport { Dispatch } from 'redux'\nimport { Redirect } from 'react-router-dom'\nimport { createBid } from '../../actions'\nimport { CreateBidQuery, Base } from '../../services/involve-api-service'\nimport { State, BidState, SuccessState } from '../../reducers'\nimport './confirm-form.css'\n\ntype Props = {\n  createBid: (query: CreateBidQuery) => void\n  bid: BidState\n  success: SuccessState\n}\n\nconst ConfirmForm = (props: Props) => {\n  const { bid, createBid, success } = props\n  const { invoice, withdraw, base } = bid\n\n  const [ redirect, setRedirect ] = useState(false)\n\n  if (!invoice.amount || !withdraw.amount) return <Redirect to='/' />\n  if (redirect) return <Redirect to={'/'} />\n  if (success.message) return <Redirect to={'/success'} />\n\n  const handleCancel = () => {\n    setRedirect(true)\n  }\n\n  const handleConfirm = () => {\n    const query = {\n      amount: Number(bid[base as Base].amount),\n      base: base as Base,\n      invoicePayMethod: Number(invoice.methodId),\n      withdrawPayMethod: Number(withdraw.methodId)\n    }\n    createBid(query)\n  }\n\n  return <div className='form_wrapper confirm'>\n    <h2>Details</h2>\n    <div className='row'>\n      <div className='base'>Sell</div><div>{invoice.amount} {invoice.methodName}</div>\n    </div>\n    <div className='row'>\n      <div className='base'>Buy</div><div>{withdraw.amount} {withdraw.methodName}</div>\n    </div>\n    <div className='row'>\n      <button type=\"button\" className='button cancel' onClick={handleCancel}>Cancel</button>\n      <button type=\"button\" className='button' onClick={handleConfirm}>Confirm</button>\n    </div>\n    \n  </div>\n}\n\nconst mapStateToProps = ({ bid, success }: State) => {\n  return {\n    bid, success\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    createBid: (query: CreateBidQuery) => createBid(dispatch, query)()\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmForm)","import React from 'react'\nimport ConfirmForm from '../confirm-form/confirm-form'\n\nconst Confirm = () => {\n  return <ConfirmForm />\n}\n\nexport default Confirm","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect, NavLink } from 'react-router-dom'\nimport { State, SuccessState } from '../../reducers'\nimport icon from './success.svg'\nimport './success-form.css'\n\ntype Props = {\n  success: SuccessState\n}\n\nconst SuccessForm = (props: Props) => {\n  const { success } = props\n\n  if (success.message === '') return <Redirect to='/' />\n\n  return <div className='form_wrapper success'>\n    <img src={icon} />\n    <h2>{success.message}</h2>\n    <div>\n      Your exchange order has been placed successfully and will be processed soon.\n    </div>\n    <NavLink to='/'><button className='button'>Home</button></NavLink>\n  </div>\n}\n\nconst mapStateToProps = ({ success }: State) => {\n  return {\n    success\n  }\n}\n\nexport default connect(mapStateToProps, {})(SuccessForm)","import React from 'react'\nimport SuccessForm from '../success-form/success-form'\n\nconst Success = () => {\n  return <SuccessForm />\n}\n\n\nexport default Success","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport Exchange from '../pages/exchange'\nimport Confirm from '../pages/confirm'\nimport Success from '../pages/success'\nimport './app.css';\n\nconst App = () => {\n  return (\n    <div className='main'>\n      <Switch>\n        <Route\n          path=\"/\"\n          component={Exchange}\n          exact />\n        <Route\n          path=\"/confirm\"\n          component={Confirm}\n          exact />\n        <Route\n          path=\"/success\"\n          component={Success}\n          exact />\n\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react'\nimport './error-indicator.css'\n\nconst ErrorIndicator = () => {\n  return <div>Error!</div>;\n};\n\nexport default ErrorIndicator","import React, { Component } from 'react'\nimport ErrorIndicator from '../error-indicator/error-indicator'\n\nexport default class ErrorBoundry extends Component {\n\n  state = {\n    hasError: false\n  };\n\n  componentDidCatch() {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <ErrorIndicator />\n    }\n\n    return this.props.children\n  }\n}","import { ActionTypes, FETCH_PAYMETHODS_SUCCESS, FETCH_PAYMETHODS_REQUEST, CHANGE_METHOD, FETCH_VALUE_REQUEST, FETCH_VALUE_SUCCESS, CHANGE_AMOUNT, CREATE_BID_REQUEST, CREATE_BID_SUCCESS, CLEAR_INPUTS } from \"../actions\";\nimport { PayMethod } from \"../services/involve-api-service\";\n\nconst initialState = {\n  payMethods: {\n    invoice: [] as PayMethod[],\n    withdraw: [] as PayMethod[],\n    isLoading: false\n  },\n\n  bid: {\n    base: '',\n    invoice: {\n      methodName: '',\n      methodId: '',\n      amount: '',\n      isLoading: false\n    },\n    withdraw: {\n      methodName: '',\n      methodId: '',\n      amount: '',\n      isLoading: false\n    }\n  },\n\n  success: {\n    message: '',\n    isLoading: false\n  }\n};\n\nexport type State = typeof initialState\nexport type PayMethodsState = typeof initialState.payMethods\nexport type BidState = typeof initialState.bid\nexport type SuccessState = typeof initialState.success\n\nconst reducer = (state = initialState, action: ActionTypes) => {\n\n  switch (action.type) {\n    case FETCH_PAYMETHODS_REQUEST:\n      return {...state, payMethods: { ...state.payMethods, isLoading: true }}\n    \n    case FETCH_PAYMETHODS_SUCCESS:\n      const { invoice, withdraw } = action.payload\n\n      return {...state, payMethods: { \n          isLoading: false, \n          invoice,\n          withdraw\n        }\n      }\n\n    case CHANGE_METHOD:\n      const { base, methodId } = action.payload\n      const methodName = state.payMethods[base].find((x) => x.id.toString() === methodId)?.name\n      return {...state, bid: {\n          ...state.bid,\n          [base]: { ...state.bid[base], methodId, methodName }\n        }\n      }\n\n    case CHANGE_AMOUNT: {\n      const { base, amount } = action.payload\n\n      return {...state, bid: {\n          ...state.bid,\n          [base]: { ...state.bid[base], amount }\n        }\n      }\n    }\n\n    case FETCH_VALUE_REQUEST: {\n      const { base } = action.payload\n      return {...state, bid: {\n          ...state.bid,\n          [base]: { ...state.bid[base], isLoading: true }\n        }\n      }\n    }\n\n    case FETCH_VALUE_SUCCESS: {\n      const { base } = action.payload\n      const baseChanged = base === 'invoice' ? 'withdraw' : 'invoice'\n      return {...state, bid: {\n          ...state.bid,\n          [base]: { ...state.bid[base], isLoading: false },\n          base: baseChanged\n        }\n      }\n    }\n\n    case CREATE_BID_REQUEST:\n      return {...state, success: {\n          ...state.success,\n          isLoading: true\n        }\n      }\n    \n    case CREATE_BID_SUCCESS:\n      return {...state, success: {\n          isLoading: false,\n          message: action.payload.message\n        }\n      }\n    \n    case CLEAR_INPUTS: {\n      return {...state, success:{\n          ...state.success,\n          message: ''\n        },\n        bid: {\n          ...state.bid,\n          base: '',\n          invoice: {\n            ...state.bid.invoice,\n            amount: ''\n          },\n          withdraw: {\n            ...state.bid.withdraw,\n            amount: ''\n          }\n        }\n      }\n    }\n    default:\n      return state\n  }\n};\n\nexport default reducer","import { createStore } from 'redux';\n\nimport reducer from './reducers';\n\nconst store = createStore(reducer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './components/app/app';\nimport ErrorBoundry from './components/error-boundry/error-boundry';\nimport store from './store';\n\n/* \n  Здарвствуйте, \n  напишите пожалуйста фидбек.\n\n  Старался использовать как можно меньше библиотек:\n  только react, redux, react-redux\n*/\n\nReactDOM.render(\n  <Provider store={store}>\n    <ErrorBoundry>\n        <Router>\n          <App />\n        </Router>\n    </ErrorBoundry>\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}